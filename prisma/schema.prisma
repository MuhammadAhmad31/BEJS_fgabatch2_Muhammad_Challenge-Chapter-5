// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String        @id @default(uuid())
  name     String
  email    String        @unique
  password String
  profile  Profile?
  accounts BankAccount[]
}

model BankAccount {
  id                 String        @id @default(uuid())
  userId             String
  bankName           String
  bankAccountNumber  String
  balance            Float
  transactionsSource Transaction[] @relation("sourceAccount")
  transactionsDest   Transaction[] @relation("destAccount")
  withdrawals        Withdrawal[]
  deposits           Deposit[]

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, bankAccountNumber])
}

model Profile {
  id             String @id @default(uuid())
  userId         String @unique
  identityType   String
  identityNumber String
  address        String

  user User @relation(fields: [userId], references: [id])
}

model Transaction {
  id                   String @id @default(uuid())
  sourceAccountId      String
  destinationAccountId String
  amount               Float

  sourceAccount BankAccount @relation("sourceAccount", fields: [sourceAccountId], references: [id])
  destAccount   BankAccount @relation("destAccount", fields: [destinationAccountId], references: [id])
}

model Withdrawal {
  id        String      @id @default(uuid())
  accountId String
  amount    Float
  createdAt DateTime    @default(now())
  account   BankAccount @relation(fields: [accountId], references: [id])
}

model Deposit {
  id        String      @id @default(uuid())
  accountId String
  amount    Float
  createdAt DateTime    @default(now())
  account   BankAccount @relation(fields: [accountId], references: [id])
}
